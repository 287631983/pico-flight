// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// osd //
// --- //

#define osd_wrap_target 0
#define osd_wrap 0

#define osd_FRONT_PORCH 14
#define osd_HSYNC 47
#define osd_BACK_PORCH 59
#define osd_VISIBLE_REGION 515

static const uint16_t osd_program_instructions[] = {
            //     .wrap_target
    0x6008, //  0: out    pins, 8                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program osd_program = {
    .instructions = osd_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config osd_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + osd_wrap_target, offset + osd_wrap);
    return c;
}

#include "hardware/clocks.h"
static inline void osd_program_init(PIO pio, uint sm, uint offset, uint pin_base, uint pin_count, float freq) {
    for(uint i=pin_base; i<pin_base+pin_count; i++) {
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, pin_count, true);
    pio_sm_config c = osd_program_get_default_config(offset);
    //sm_config_set_out_special(&c, true, false, -1);
    sm_config_set_out_shift(&c, true, true, 8);
    sm_config_set_out_pins(&c, pin_base, pin_count);
    //sm_config_set_set_pins(&c, pin_base, pin_count);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    uint32_t clk = clock_get_hz(clk_sys);
    float div =  (float)clk / (freq);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

